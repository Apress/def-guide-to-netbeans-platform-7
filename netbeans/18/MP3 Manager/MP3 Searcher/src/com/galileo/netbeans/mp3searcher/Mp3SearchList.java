/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.galileo.netbeans.mp3searcher;

import com.galileo.netbeans.mp3object.Mp3FileObject;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.spi.navigator.NavigatorLookupHint;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.galileo.netbeans.mp3searcher//Mp3SearchList//EN",
autostore = false)
@TopComponent.Description(preferredID = "Mp3SearchListTopComponent",
iconBase = "com/galileo/netbeans/mp3searcher/search.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "com.galileo.netbeans.mp3searcher.Mp3SearchListTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_Mp3SearchListAction",
preferredID = "Mp3SearchListTopComponent")
public final class Mp3SearchList extends TopComponent implements ListSelectionListener {

   private Mp3SearchListModel model = new Mp3SearchListModel();
   
   private final InstanceContent content = new InstanceContent();
   
   public Mp3SearchList() {
      initComponents();
      setName(NbBundle.getMessage(Mp3SearchList.class, "CTL_Mp3SearchListTopComponent"));
      setToolTipText(NbBundle.getMessage(Mp3SearchList.class, "HINT_Mp3SearchListTopComponent"));

      searchResults.setModel(model);
      searchResults.getSelectionModel().addListSelectionListener(this);
      
      associateLookup(new ProxyLookup(new AbstractLookup(content), Lookups.singleton(new Mp3AlbumNavigatorLookupHint())));
   }

   private static final class Mp3SearchListModel extends AbstractTableModel {
      private String[] columns = {"Interpret", "Titel", "Jahr"};
      private List<Mp3FileObject> data = new ArrayList<Mp3FileObject>();

      public Mp3SearchListModel() {
         data.add(new Mp3FileObject("Gigi D'Agostino", "The rain", "2006"));
         data.add(new Mp3FileObject("Marquess", "El temperamento", "2006"));
         data.add(new Mp3FileObject("Floorfilla", "Cyberdream", "2006"));
      }
      
      public Mp3FileObject getRow(int row) {
         return data.get(row);
      }
      
      @Override
      public int getRowCount() {
         return data.size();
      }
      
      @Override
      public int getColumnCount() {
         return columns.length;
      }
      
      @Override
      public String getColumnName(int col) {
         return columns[col];
      }
      
      @Override
      public Object getValueAt(int row, int col) {
         Mp3FileObject mp3 = data.get(row);
         
         switch(col) {
            case 0: return(mp3.getArtist());
            case 1: return(mp3.getTitle());
            case 2: return(mp3.getYear());
         }
         return "";
      }
   }
   
   private static final class Mp3AlbumNavigatorLookupHint implements NavigatorLookupHint {

      @Override
      public String getContentType() {
         return "audio/mpeg";
      }
   }

   @Override
    public void valueChanged(ListSelectionEvent event) {
       if(!event.getValueIsAdjusting()) {
          Mp3FileObject mp3 = model.getRow(searchResults.getSelectedRow());
          content.set(Collections.singleton(mp3), null);
       }
    }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
      // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jTextField1 = new javax.swing.JTextField();
      jLabel1 = new javax.swing.JLabel();
      jSeparator1 = new javax.swing.JSeparator();
      jLabel2 = new javax.swing.JLabel();
      jButton1 = new javax.swing.JButton();
      jScrollPane = new javax.swing.JScrollPane();
      searchResults = new javax.swing.JTable();

      org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(Mp3SearchList.class, "Mp3SearchList.jLabel1.text")); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(Mp3SearchList.class, "Mp3SearchList.jLabel2.text")); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(Mp3SearchList.class, "Mp3SearchList.jButton1.text")); // NOI18N

      searchResults.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {

         },
         new String [] {

         }
      ));
      jScrollPane.setViewportView(searchResults);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 400, Short.MAX_VALUE)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
               .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jLabel1)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                  .addGap(11, 11, 11)
                  .addComponent(jButton1))
               .addComponent(jScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 300, Short.MAX_VALUE)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel1)
               .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButton1))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

      // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButton1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JScrollPane jScrollPane;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JTextField jTextField1;
   private javax.swing.JTable searchResults;
   // End of variables declaration//GEN-END:variables
   @Override
   public void componentOpened() {
      // TODO add custom code on component opening
   }

   @Override
   public void componentClosed() {
      // TODO add custom code on component closing
   }

   void writeProperties(java.util.Properties p) {
      // better to version settings since initial version as advocated at
      // http://wiki.apidesign.org/wiki/PropertyFiles
      p.setProperty("version", "1.0");
      // TODO store your settings
   }

   void readProperties(java.util.Properties p) {
      String version = p.getProperty("version");
      // TODO read your settings according to their version
   }
}
