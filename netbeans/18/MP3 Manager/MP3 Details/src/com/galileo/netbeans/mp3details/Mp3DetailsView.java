/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.galileo.netbeans.mp3details;

import com.galileo.netbeans.mp3object.Mp3FileObject;
import java.util.Collection;
import org.openide.util.LookupEvent;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupListener;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.galileo.netbeans.mp3details//Mp3DetailsView//EN",
autostore = false)
@TopComponent.Description(preferredID = "Mp3DetailsViewTopComponent",
iconBase = "com/galileo/netbeans/mp3details/details.png",
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "properties", openAtStartup = true)
@ActionID(category = "Window", id = "com.galileo.netbeans.mp3details.Mp3DetailsViewTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_Mp3DetailsViewAction",
preferredID = "Mp3DetailsViewTopComponent")
public final class Mp3DetailsView extends TopComponent  implements LookupListener {
   
   private Lookup.Result<Mp3FileObject> result = null;

   public Mp3DetailsView() {
      initComponents();
      setName(NbBundle.getMessage(Mp3DetailsView.class, "CTL_Mp3DetailsViewTopComponent"));
      setToolTipText(NbBundle.getMessage(Mp3DetailsView.class, "HINT_Mp3DetailsViewTopComponent"));

   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
      // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      artist1 = new javax.swing.JLabel();
      jLabel4 = new javax.swing.JLabel();
      jSeparator1 = new javax.swing.JSeparator();
      jLabel1 = new javax.swing.JLabel();
      jLabel3 = new javax.swing.JLabel();
      jLabel2 = new javax.swing.JLabel();
      artist = new javax.swing.JLabel();
      title = new javax.swing.JLabel();
      year = new javax.swing.JLabel();

      org.openide.awt.Mnemonics.setLocalizedText(artist1, org.openide.util.NbBundle.getMessage(Mp3DetailsView.class, "Mp3DetailsView.artist1.text")); // NOI18N

      jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(Mp3DetailsView.class, "Mp3DetailsView.jLabel4.text")); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(Mp3DetailsView.class, "Mp3DetailsView.jLabel1.text")); // NOI18N

      jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(Mp3DetailsView.class, "Mp3DetailsView.jLabel3.text")); // NOI18N

      jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
      org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(Mp3DetailsView.class, "Mp3DetailsView.jLabel2.text")); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(artist, org.openide.util.NbBundle.getMessage(Mp3DetailsView.class, "Mp3DetailsView.artist.text")); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(title, org.openide.util.NbBundle.getMessage(Mp3DetailsView.class, "Mp3DetailsView.title.text")); // NOI18N

      org.openide.awt.Mnemonics.setLocalizedText(year, org.openide.util.NbBundle.getMessage(Mp3DetailsView.class, "Mp3DetailsView.year.text")); // NOI18N

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
               .addComponent(jLabel1)
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(jLabel3)
                     .addComponent(jLabel2)
                     .addComponent(jLabel4))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(artist, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                     .addComponent(title, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE)
                     .addComponent(year, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel2)
               .addComponent(artist, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(jLabel3)
               .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(jLabel4)
               .addComponent(year, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
   }// </editor-fold>//GEN-END:initComponents

      // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JLabel artist;
   private javax.swing.JLabel artist1;
   private javax.swing.JLabel jLabel1;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JLabel jLabel3;
   private javax.swing.JLabel jLabel4;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JLabel title;
   private javax.swing.JLabel year;
   // End of variables declaration//GEN-END:variables
   @Override
   public void componentOpened() {
       result = Utilities.actionsGlobalContext().lookupResult(Mp3FileObject.class);
       result.addLookupListener(this);
   }

   @Override
   public void componentClosed() {
       result.removeLookupListener(this);
       result = null;
   }

   void writeProperties(java.util.Properties p) {
      // better to version settings since initial version as advocated at
      // http://wiki.apidesign.org/wiki/PropertyFiles
      p.setProperty("version", "1.0");
      // TODO store your settings
   }

   void readProperties(java.util.Properties p) {
      String version = p.getProperty("version");
      // TODO read your settings according to their version
   }

   @Override
   public void resultChanged(LookupEvent ev) {
       Collection<? extends Mp3FileObject> mp3s = result.allInstances();
       if(!mp3s.isEmpty()) { /* item selected */
          Mp3FileObject mp3 = mp3s.iterator().next();
          artist.setText(mp3.getArtist());
          title.setText(mp3.getTitle());
          year.setText(mp3.getYear());
       }
   }
}
