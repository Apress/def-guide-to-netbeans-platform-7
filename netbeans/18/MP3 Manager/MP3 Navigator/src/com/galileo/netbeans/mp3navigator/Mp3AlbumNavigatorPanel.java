package com.galileo.netbeans.mp3navigator;

import com.galileo.netbeans.mp3object.Mp3FileObject;
import java.util.Collection;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import org.netbeans.spi.navigator.NavigatorPanel;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.util.NbBundle;
import org.openide.util.Utilities;


public class Mp3AlbumNavigatorPanel extends JComponent implements NavigatorPanel, LookupListener {
   
   private Lookup.Result<Mp3FileObject> result = null;
   
   public Mp3AlbumNavigatorPanel() {
      initComponents();
   }
   
   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
   private void initComponents() {

      jScrollPane1 = new javax.swing.JScrollPane();
      albums = new javax.swing.JList();
      jLabel2 = new javax.swing.JLabel();
      albumsOf = new javax.swing.JLabel();

      jScrollPane1.setViewportView(albums);

      jLabel2.setText(org.openide.util.NbBundle.getMessage(Mp3AlbumNavigatorPanel.class, "Mp3AlbumNavigatorPanel.jLabel2.text")); // NOI18N

      albumsOf.setFont(new java.awt.Font("Tahoma", 1, 11));
      albumsOf.setText(org.openide.util.NbBundle.getMessage(Mp3AlbumNavigatorPanel.class, "Mp3AlbumNavigatorPanel.albumsOf.text")); // NOI18N

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jLabel2)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(albumsOf)))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jLabel2)
               .addComponent(albumsOf))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents
   
   
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JList albums;
   private javax.swing.JLabel albumsOf;
   private javax.swing.JLabel jLabel2;
   private javax.swing.JScrollPane jScrollPane1;
   // End of variables declaration//GEN-END:variables
    
   @Override
   public String getDisplayHint() {
      return NbBundle.getMessage(Mp3AlbumNavigatorPanel.class, "HINT_Mp3AlbumNavigatorPanel");
   }
    
   @Override
   public String getDisplayName() {
      return NbBundle.getMessage(Mp3AlbumNavigatorPanel.class, "CTL_Mp3AlbumNavigatorPanel");
   }

   @Override
   public JComponent getComponent() {
      return this;
   }
    
   @Override
    public void panelActivated(Lookup context) {
       result = Utilities.actionsGlobalContext().lookupResult(Mp3FileObject.class);
       result.addLookupListener(this);
    }
    
   @Override
    public void panelDeactivated() {
       result.removeLookupListener(this);
       result = null;
    }
    
   @Override
    public Lookup getLookup() {
        return null;
    }

   @Override
    public void resultChanged(LookupEvent arg0) {
       Collection<? extends Mp3FileObject> mp3s = result.allInstances();
       if(!mp3s.isEmpty()) {
          Mp3FileObject mp3 = mp3s.iterator().next();
          /* search for albums of selected artist */
          albumsOf.setText(mp3.getArtist());
          DefaultListModel model = new DefaultListModel();
          model.addElement(("Album 1 of " + mp3.getArtist()));
          model.addElement(("Album 2 of " + mp3.getArtist()));
          albums.setModel(model);
       }
    }
}
