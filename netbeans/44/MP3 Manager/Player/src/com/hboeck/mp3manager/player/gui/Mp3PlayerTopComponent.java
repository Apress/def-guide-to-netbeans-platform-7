/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hboeck.mp3manager.player.gui;

import com.hboeck.mp3manager.filetype.Mp3DataObject;
import com.hboeck.mp3manager.id3.v1.ID3v1Tag;
import com.hboeck.mp3manager.services.player.Mp3Player;
import com.hboeck.mp3manager.services.player.Mp3PlayerEventListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.hboeck.mp3manager.player.gui//Mp3Player//EN",
autostore = false)
@TopComponent.Description(preferredID = "Mp3PlayerTopComponent",
iconBase="com/hboeck/mp3manager/player/gui/player.png", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "com.hboeck.mp3manager.player.gui.Mp3PlayerTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_Mp3PlayerAction",
preferredID = "Mp3PlayerTopComponent")
public final class Mp3PlayerTopComponent extends TopComponent implements Mp3PlayerEventListener {

   private static final SimpleDateFormat SDF = new SimpleDateFormat("mm:ss");
   
   private Timer t = null;
   private Mp3Player player = null;
   
   public Mp3PlayerTopComponent() {
      initComponents();
      setName(NbBundle.getMessage(Mp3PlayerTopComponent.class, "CTL_Mp3PlayerTopComponent"));
      setToolTipText(NbBundle.getMessage(Mp3PlayerTopComponent.class, "HINT_Mp3PlayerTopComponent"));
      player = Mp3Player.getDefault();
      player.addEventListener(this);
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      play = new javax.swing.JButton();
      jSeparator1 = new javax.swing.JSeparator();
      duration = new javax.swing.JSlider();
      title = new javax.swing.JLabel();
      time = new javax.swing.JLabel();
      mute = new javax.swing.JToggleButton();
      volume = new javax.swing.JSlider();
      previous = new javax.swing.JButton();
      next = new javax.swing.JButton();
      open = new javax.swing.JButton();
      pause = new javax.swing.JButton();
      stop = new javax.swing.JButton();

      play.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hboeck/mp3manager/player/gui/icons/play.png"))); // NOI18N
      play.setToolTipText(org.openide.util.NbBundle.getMessage(Mp3PlayerTopComponent.class, "Mp3PlayerTopComponent.play.toolTipText")); // NOI18N
      play.setMargin(new java.awt.Insets(2, 6, 2, 6));
      play.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            playActionPerformed(evt);
         }
      });

      jSeparator1.setPreferredSize(new java.awt.Dimension(0, 1));

      duration.setValue(0);
      duration.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseReleased(java.awt.event.MouseEvent evt) {
            durationMouseReleased(evt);
         }
      });
      duration.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            durationStateChanged(evt);
         }
      });

      title.setFont(new java.awt.Font("Arial", 0, 14));
      org.openide.awt.Mnemonics.setLocalizedText(title, org.openide.util.NbBundle.getMessage(Mp3PlayerTopComponent.class, "Mp3PlayerTopComponent.title.text")); // NOI18N

      time.setFont(new java.awt.Font("Arial", 0, 18));
      org.openide.awt.Mnemonics.setLocalizedText(time, org.openide.util.NbBundle.getMessage(Mp3PlayerTopComponent.class, "Mp3PlayerTopComponent.time.text")); // NOI18N

      mute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hboeck/mp3manager/player/gui/icons/mute.png"))); // NOI18N
      mute.setToolTipText(org.openide.util.NbBundle.getMessage(Mp3PlayerTopComponent.class, "Mp3PlayerTopComponent.mute.toolTipText")); // NOI18N
      mute.setMargin(new java.awt.Insets(2, 5, 2, 5));
      mute.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            muteActionPerformed(evt);
         }
      });

      volume.setOrientation(javax.swing.JSlider.VERTICAL);
      volume.setValue(20);
      volume.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            volumeStateChanged(evt);
         }
      });

      previous.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hboeck/mp3manager/player/gui/icons/previous.png"))); // NOI18N
      previous.setToolTipText(org.openide.util.NbBundle.getMessage(Mp3PlayerTopComponent.class, "Mp3PlayerTopComponent.previous.toolTipText")); // NOI18N
      previous.setMargin(new java.awt.Insets(2, 5, 2, 5));
      previous.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            previousActionPerformed(evt);
         }
      });

      next.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hboeck/mp3manager/player/gui/icons/next.png"))); // NOI18N
      next.setToolTipText(org.openide.util.NbBundle.getMessage(Mp3PlayerTopComponent.class, "Mp3PlayerTopComponent.next.toolTipText")); // NOI18N
      next.setMargin(new java.awt.Insets(2, 5, 2, 5));
      next.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            nextActionPerformed(evt);
         }
      });

      open.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hboeck/mp3manager/player/gui/icons/open.png"))); // NOI18N
      open.setToolTipText(org.openide.util.NbBundle.getMessage(Mp3PlayerTopComponent.class, "Mp3PlayerTopComponent.open.toolTipText")); // NOI18N
      open.setMargin(new java.awt.Insets(2, 6, 2, 6));
      open.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            openActionPerformed(evt);
         }
      });

      pause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hboeck/mp3manager/player/gui/icons/pause.png"))); // NOI18N
      pause.setToolTipText(org.openide.util.NbBundle.getMessage(Mp3PlayerTopComponent.class, "Mp3PlayerTopComponent.pause.toolTipText")); // NOI18N
      pause.setMargin(new java.awt.Insets(2, 6, 2, 6));
      pause.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            pauseActionPerformed(evt);
         }
      });

      stop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hboeck/mp3manager/player/gui/icons/stop.png"))); // NOI18N
      stop.setToolTipText(org.openide.util.NbBundle.getMessage(Mp3PlayerTopComponent.class, "Mp3PlayerTopComponent.stop.toolTipText")); // NOI18N
      stop.setMargin(new java.awt.Insets(2, 6, 2, 6));
      stop.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            stopActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(12, 12, 12)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                     .addGroup(layout.createSequentialGroup()
                        .addComponent(time)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                     .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                     .addComponent(duration, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE))
                  .addGap(18, 18, 18)
                  .addComponent(volume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(previous)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(play)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(pause)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(stop)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(next)
                  .addGap(18, 18, 18)
                  .addComponent(open)
                  .addGap(18, 18, 18)
                  .addComponent(mute)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
               .addGroup(layout.createSequentialGroup()
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                     .addComponent(time)
                     .addComponent(title))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(duration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
               .addComponent(volume, 0, 0, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                  .addComponent(previous)
                  .addComponent(play)
                  .addComponent(pause)
                  .addComponent(stop)
                  .addComponent(next))
               .addComponent(open)
               .addComponent(mute))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
      );
   }// </editor-fold>//GEN-END:initComponents

   private void playActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playActionPerformed
      Node n[] = getRegistry().getActivatedNodes();
      if(n != null) {
         Mp3DataObject mp3 = n[0].getLookup().lookup(Mp3DataObject.class);
         if(mp3 != null) {
            player.play(mp3);
         }
      }
}//GEN-LAST:event_playActionPerformed

   private void durationMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_durationMouseReleased
      player.setMediaTime(duration.getValue());
}//GEN-LAST:event_durationMouseReleased

   private void durationStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_durationStateChanged
      //   if(duration.getValueIsAdjusting()) {
      //      title.setText(sdf.format(new Date(duration.getValue()*1000)));
      //   } else {
      //      title.setText("Title");
      //   }
}//GEN-LAST:event_durationStateChanged

   private void muteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muteActionPerformed
      player.setMute(mute.isSelected());
}//GEN-LAST:event_muteActionPerformed

   private void volumeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_volumeStateChanged
      player.setVolume(volume.getValue());
}//GEN-LAST:event_volumeStateChanged

   private void previousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousActionPerformed
      player.previous();
}//GEN-LAST:event_previousActionPerformed

   private void nextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextActionPerformed
      player.next();
}//GEN-LAST:event_nextActionPerformed

   private void openActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openActionPerformed
      JFileChooser chooser = new JFileChooser("D:/");
      chooser.setFileFilter(new FileNameExtensionFilter("MP3 Files", "mp3"));
      if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
         try {
            player.play(Mp3DataObject.find(chooser.getSelectedFile()));
         } catch(Exception e) {
            Exceptions.printStackTrace(e);
         }
      }
}//GEN-LAST:event_openActionPerformed

   private void pauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseActionPerformed
      player.pause();
}//GEN-LAST:event_pauseActionPerformed

   private void stopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopActionPerformed
      player.stop();
}//GEN-LAST:event_stopActionPerformed

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JSlider duration;
   private javax.swing.JSeparator jSeparator1;
   private javax.swing.JToggleButton mute;
   private javax.swing.JButton next;
   private javax.swing.JButton open;
   private javax.swing.JButton pause;
   private javax.swing.JButton play;
   private javax.swing.JButton previous;
   private javax.swing.JButton stop;
   private javax.swing.JLabel time;
   private javax.swing.JLabel title;
   private javax.swing.JSlider volume;
   // End of variables declaration//GEN-END:variables
   @Override
   public void componentOpened() {
      // TODO add custom code on component opening
   }

   @Override
   public void componentClosed() {
      // TODO add custom code on component closing
   }

   void writeProperties(java.util.Properties p) {
      // better to version settings since initial version as advocated at
      // http://wiki.apidesign.org/wiki/PropertyFiles
      p.setProperty("version", "1.0");
      // TODO store your settings
   }

   void readProperties(java.util.Properties p) {
      String version = p.getProperty("version");
      // TODO read your settings according to their version
   }
   

   @Override
    public void playing(Mp3DataObject mp3) {
      resetInfos();
      //setActivatedNodes(new Node[]{mp3.getNodeDelegate()});
      title.setText(mp3.getName());
      duration.setMaximum(player.getDuration());

      ID3v1Tag id3v1 = mp3.getID3v1Tag();
      title.setText(id3v1.getArtist() + " - " + id3v1.getTitle());

      ActionListener updateInfo = new ActionListener() {

         @Override
         public void actionPerformed(ActionEvent evt) {
            duration.setValue(player.getMediaTime());
            time.setText(SDF.format(new Date(player.getMediaTime() * 1000)));
         }
      };
      if (t != null) {
         t.stop();
      }
      t = new Timer(1000, updateInfo);
      t.start();
   }

   @Override
   public void stopped() {
      resetInfos();
      if(t != null) {
         t.stop();
      }
   }

   private void resetInfos() {
      duration.setValue(0);
      time.setText("00:00");
      title.setText("Title");
   }
}
