package com.galileo.netbeans.module;

import com.galileo.netbeans.client.OrderService;
import com.galileo.netbeans.client.OrderService_Service;
import com.galileo.netbeans.client.Product;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.AbstractTableModel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;


@ConvertAsProperties(dtd = "-//com.galileo.netbeans.module//Order//EN",
autostore = false)
@TopComponent.Description(preferredID = "OrderTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "com.galileo.netbeans.module.OrderTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_OrderAction",
preferredID = "OrderTopComponent")
public final class OrderTopComponent extends TopComponent {
    
    private ProductTableModel tableModel = new ProductTableModel();
    
    private OrderService_Service service = new OrderService_Service();
    private OrderService port;

    public OrderTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(OrderTopComponent.class, "CTL_OrderTopComponent"));
        setToolTipText(NbBundle.getMessage(OrderTopComponent.class, "HINT_OrderTopComponent"));

        port = service.getOrderServicePort();
    }

    private final class ProductTableModel extends AbstractTableModel {
        
        private String[] columns = {"ID", "Order ID", "Name", "Price"};
        private List<Product> products = new ArrayList<Product>();
        
        public Product getRow(int rowIndex) {
            return products.get(rowIndex);
        }

        @Override
        public int getRowCount() {
            return products.size();
        }

        @Override
        public int getColumnCount() {
            return columns.length;
        }
        
        @Override
        public String getColumnName(int columnIndex) {
            return columns[columnIndex];
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Product p = products.get(rowIndex);
            switch (columnIndex) {
                case 0: return p.getId();
                case 1: return p.getOrderId();
                case 2: return p.getName();
                case 3: return p.getPrice() + " €";
                default: return "";
            }
        }

        public List<Product> getList() {
            return products;
        }
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addToCart = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        cartSum = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cartAmount = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        reloadProducts = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableView = new javax.swing.JTable();

        org.openide.awt.Mnemonics.setLocalizedText(addToCart, org.openide.util.NbBundle.getMessage(OrderTopComponent.class, "OrderTopComponent.addToCart.text")); // NOI18N
        addToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(OrderTopComponent.class, "OrderTopComponent.jPanel4.border.title"))); // NOI18N

        cartSum.setFont(new java.awt.Font("Tahoma", 1, 11));
        org.openide.awt.Mnemonics.setLocalizedText(cartSum, org.openide.util.NbBundle.getMessage(OrderTopComponent.class, "OrderTopComponent.cartSum.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(OrderTopComponent.class, "OrderTopComponent.jLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(cartAmount, org.openide.util.NbBundle.getMessage(OrderTopComponent.class, "OrderTopComponent.cartAmount.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(OrderTopComponent.class, "OrderTopComponent.jLabel3.text")); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cartAmount)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(cartSum)
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cartSum))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cartAmount)
                    .addComponent(jLabel3)))
        );

        org.openide.awt.Mnemonics.setLocalizedText(reloadProducts, org.openide.util.NbBundle.getMessage(OrderTopComponent.class, "OrderTopComponent.reloadProducts.text")); // NOI18N
        reloadProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadProductsActionPerformed(evt);
            }
        });

        tableView.setModel(tableModel);
        jScrollPane1.setViewportView(tableView);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(reloadProducts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 213, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addToCart, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(reloadProducts)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(addToCart)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartActionPerformed
        if (tableView.getSelectedRowCount() > 0) {
            port.addProductToCart(tableModel.getRow(tableView.getSelectedRow()));
            cartSum.setText(port.getSumOfCart() + " €");
            cartAmount.setText("" + port.getAmountOfCart());
        }
    }//GEN-LAST:event_addToCartActionPerformed

    private void reloadProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadProductsActionPerformed
        tableModel.getList().clear();
        tableModel.getList().addAll(port.getProducts());
        tableModel.fireTableDataChanged();
    }//GEN-LAST:event_reloadProductsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToCart;
    private javax.swing.JLabel cartAmount;
    private javax.swing.JLabel cartSum;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton reloadProducts;
    private javax.swing.JTable tableView;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
