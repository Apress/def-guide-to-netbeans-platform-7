/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.galileo.netbeans.module.scene;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.api.visual.action.ActionFactory;
import org.netbeans.api.visual.action.WidgetAction;
import org.netbeans.api.visual.widget.ImageWidget;
import org.netbeans.api.visual.widget.LayerWidget;
import org.netbeans.api.visual.widget.Scene;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.ImageUtilities;
import org.openide.util.lookup.Lookups;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.galileo.netbeans.module.scene//Scene//EN",
autostore = false)
@TopComponent.Description(preferredID = "SceneTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "com.galileo.netbeans.module.scene.SceneTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_SceneAction",
preferredID = "SceneTopComponent")
public final class SceneTopComponent extends TopComponent {
   
   private Scene sc = new Scene();

   public SceneTopComponent() {
      initComponents();
      setName(NbBundle.getMessage(SceneTopComponent.class, "CTL_SceneTopComponent"));
      setToolTipText(NbBundle.getMessage(SceneTopComponent.class, "HINT_SceneTopComponent"));
      
      scenePane.setViewportView(sc.createView());
      LayerWidget layer1 = new LayerWidget(sc);
      sc.addChild(layer1);

      ImageWidget w1 = new ImageWidget(sc, ImageUtilities.loadImage("com/galileo/netbeans/module/node.gif"));
      layer1.addChild(w1);

      ImageWidget w2 = new ImageWidget(sc, ImageUtilities.loadImage("com/galileo/netbeans/module/node.gif"));
      layer1.addChild(w2);

      LayerWidget layer2 = new LayerWidget(sc);
      sc.addChild(layer2);

      ImageWidget w3 = new ImageWidget(sc, ImageUtilities.loadImage("com/galileo/netbeans/module/node2.gif"));
      layer2.addChild(w3);

      WidgetAction ma = ActionFactory.createMoveAction();
      w1.getActions().addAction(ma);
      w2.getActions().addAction(ma);
      w3.getActions().addAction(ma);
      
      associateLookup(Lookups.singleton(sc.createSatelliteView()));
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
      // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      save = new javax.swing.JButton();
      scenePane = new javax.swing.JScrollPane();

      org.openide.awt.Mnemonics.setLocalizedText(save, org.openide.util.NbBundle.getMessage(SceneTopComponent.class, "SceneTopComponent.save.text")); // NOI18N
      save.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            saveActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 400, Short.MAX_VALUE)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(scenePane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
               .addComponent(save))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 300, Short.MAX_VALUE)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(scenePane, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(save)
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

   private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
      BufferedImage img = new BufferedImage(sc.getView().getWidth(), sc.getView().getHeight(), BufferedImage.TYPE_4BYTE_ABGR);
      Graphics2D graphics = img.createGraphics();
      sc.paint(graphics);
      graphics.dispose();
      
      JFileChooser chooser = new JFileChooser();
      chooser.setFileFilter(new FileNameExtensionFilter("Portable Network Graphics (.png)", "png"));
      if(chooser.showSaveDialog(sc.getView()) == JFileChooser.APPROVE_OPTION) {
         File file = chooser.getSelectedFile();
         if (! file.getName().toLowerCase().endsWith(".png"))
            file = new File(file.getParentFile(), file.getName() + ".png");
         
         try {
            ImageIO.write(img, "png", file);
         } catch (IOException e) {
            Logger.getLogger(getName()).warning(e.toString());
         }
      }
}//GEN-LAST:event_saveActionPerformed

      // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton save;
   private javax.swing.JScrollPane scenePane;
   // End of variables declaration//GEN-END:variables
   @Override
   public void componentOpened() {
      // TODO add custom code on component opening
   }

   @Override
   public void componentClosed() {
      // TODO add custom code on component closing
   }

   void writeProperties(java.util.Properties p) {
      // better to version settings since initial version as advocated at
      // http://wiki.apidesign.org/wiki/PropertyFiles
      p.setProperty("version", "1.0");
      // TODO store your settings
   }

   void readProperties(java.util.Properties p) {
      String version = p.getProperty("version");
      // TODO read your settings according to their version
   }
}
