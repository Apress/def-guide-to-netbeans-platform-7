/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.galileo.netbeans.module.graph;

import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.netbeans.api.visual.graph.layout.GridGraphLayout;
import org.netbeans.api.visual.layout.LayoutFactory;
import org.netbeans.api.visual.layout.SceneLayout;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.lookup.Lookups;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//com.galileo.netbeans.module.graph//Graph//EN",
autostore = false)
@TopComponent.Description(preferredID = "GraphTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "com.galileo.netbeans.module.graph.GraphTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(displayName = "#CTL_GraphAction",
preferredID = "GraphTopComponent")
public final class GraphTopComponent extends TopComponent {
   
   private SceneLayout sceneLayout = null;

   public GraphTopComponent() {
      initComponents();
      setName(NbBundle.getMessage(GraphTopComponent.class, "CTL_GraphTopComponent"));
      setToolTipText(NbBundle.getMessage(GraphTopComponent.class, "HINT_GraphTopComponent"));

      MyGraphPinScene scene = new MyGraphPinScene();
      scenePane.setViewportView(scene.createView());
      scene.addNode("Node 1");
      scene.addNode("Node 2");
      scene.addNode("Node 3");
      
      scene.addPin("Node 1", "p1");
      scene.addPin("Node 2", "p2");
      scene.addPin("Node 2", "p3");
      scene.addPin("Node 3", "p4");
      
      scene.addEdge("Edge 1");
      scene.addEdge("Edge 2");
      scene.setEdgeSource("Edge 1", "p1");
      scene.setEdgeTarget("Edge 1", "p2");
      scene.setEdgeSource("Edge 2", "p3");
      scene.setEdgeTarget("Edge 2", "p4");
      
      GridGraphLayout<String, String> layout = new GridGraphLayout<String, String>();
      sceneLayout = LayoutFactory.createSceneGraphLayout(scene, layout);
      sceneLayout.invokeLayout();
      
      associateLookup(Lookups.singleton(scene.createSatelliteView()));
      
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
      // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      scenePane = new javax.swing.JScrollPane();
      doLayout = new javax.swing.JButton();

      org.openide.awt.Mnemonics.setLocalizedText(doLayout, org.openide.util.NbBundle.getMessage(GraphTopComponent.class, "GraphTopComponent.doLayout.text")); // NOI18N
      doLayout.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            doLayoutActionPerformed(evt);
         }
      });

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
      this.setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 400, Short.MAX_VALUE)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
               .addComponent(scenePane, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
               .addComponent(doLayout))
            .addContainerGap())
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGap(0, 300, Short.MAX_VALUE)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(scenePane, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(doLayout)
            .addContainerGap())
      );
   }// </editor-fold>//GEN-END:initComponents

   private void doLayoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doLayoutActionPerformed
      sceneLayout.invokeLayoutImmediately();
}//GEN-LAST:event_doLayoutActionPerformed

      // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton doLayout;
   private javax.swing.JScrollPane scenePane;
   // End of variables declaration//GEN-END:variables
   @Override
   public void componentOpened() {
      // TODO add custom code on component opening
   }

   @Override
   public void componentClosed() {
      // TODO add custom code on component closing
   }

   void writeProperties(java.util.Properties p) {
      // better to version settings since initial version as advocated at
      // http://wiki.apidesign.org/wiki/PropertyFiles
      p.setProperty("version", "1.0");
      // TODO store your settings
   }

   void readProperties(java.util.Properties p) {
      String version = p.getProperty("version");
      // TODO read your settings according to their version
   }
}
